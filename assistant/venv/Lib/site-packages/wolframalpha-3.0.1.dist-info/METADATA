Metadata-Version: 2.0
Name: wolframalpha
Version: 3.0.1
Summary: Wolfram|Alpha 2.0 API client
Home-page: https://github.com/jaraco/wolframalpha
Author: Jason R. Coombs
Author-email: jaraco@jaraco.com
License: UNKNOWN
Description-Content-Type: UNKNOWN
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Requires-Python: >=2.7
Requires-Dist: six
Requires-Dist: xmltodict
Requires-Dist: jaraco.itertools (>=2.0)
Provides-Extra: docs
Requires-Dist: sphinx; extra == 'docs'
Requires-Dist: jaraco.packaging (>=3.2); extra == 'docs'
Requires-Dist: rst.linker (>=1.9); extra == 'docs'
Provides-Extra: testing
Requires-Dist: pytest (>=2.8); extra == 'testing'
Requires-Dist: pytest-sugar (>=0.9.1); extra == 'testing'
Requires-Dist: collective.checkdocs; extra == 'testing'
Requires-Dist: pytest-flake8; extra == 'testing'
Requires-Dist: pmxbot; extra == 'testing'

.. image:: https://img.shields.io/pypi/v/wolframalpha.svg
   :target: https://pypi.org/project/wolframalpha

.. image:: https://img.shields.io/pypi/pyversions/wolframalpha.svg

.. image:: https://img.shields.io/travis/jaraco/wolframalpha/master.svg
   :target: https://travis-ci.org/jaraco/wolframalpha

.. image:: https://readthedocs.org/projects/wolframalpha/badge/?version=latest
   :target: https://wolframalpha.readthedocs.io/en/latest/?badge=latest

Python Client built against the `Wolfram|Alpha <http://wolframalpha.com>`_
v2.0 API.

Usage
=====

Basic usage is pretty simple. Create the client with your App ID (request from
Wolfram Alpha)::

    import wolframalpha
    client = wolframalpha.Client(app_id)

Then, you can send queries, which return Result objects::

    res = client.query('temperature in Washington, DC on October 3, 2012')

Result objects have `pods` (a Pod is an answer group from Wolfram Alpha)::

    for pod in res.pods:
        do_something_with(pod)

Pod objects have ``subpods`` (a Subpod is a specific response with the plaintext
reply and some additional info)::

    for pod in res.pods:
        for sub in pod.subpods:
            print(sub.text)

You may also query for simply the pods which have 'Result' titles or are
marked as 'primary' using ``Result.results``::

    print(next(res.results).text)

All objects returned are dictionary subclasses, so to find out which attributes
Wolfram|Alpha has supplied, simply invoke ``.keys()`` on the object.
Attributes formed from XML attributes can be accessed with or without their
"@" prefix (added by xmltodict).

For more information, read the source.


